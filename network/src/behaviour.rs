use std::collections::HashMap;
use std::collections::HashSet;
use std::num::NonZeroU32;
use std::time::Duration;

use futures::prelude::*;
use libp2p::{
    core::identity::Keypair,
    gossipsub::{Gossipsub, GossipsubConfig, GossipsubConfigBuilder, GossipsubEvent, GossipsubMessage},
    identify::{Identify, IdentifyEvent},
    kad::{GetClosestPeersError, Kademlia, KademliaConfig, KademliaEvent},
    kad::record::store::MemoryStore,
    mdns::{Mdns, MdnsEvent},
    multiaddr::Multiaddr,
    NetworkBehaviour,
    PeerId, ping::{Ping, PingConfig, PingEvent, PingFailure, PingSuccess},
    swarm::{NetworkBehaviourAction, NetworkBehaviourEventProcess},
    tokio_io::{AsyncRead, AsyncWrite},
};
use slog::{debug, o};

use map_core::block::Block;

use crate::{error, NetworkConfig};
use crate::{Topic, TopicHash};

const MAX_IDENTIFY_ADDRESSES: usize = 20;

/// Builds the network behaviour that manages the core protocols of eth2.
/// This core behaviour is managed by `Behaviour` which adds peer management to all core
/// behaviours.
#[derive(NetworkBehaviour)]
#[behaviour(out_event = "BehaviourEvent", poll_method = "poll")]
pub struct Behaviour<TSubstream: AsyncRead + AsyncWrite> {
    /// The routing pub-sub mechanism for eth2.
    gossipsub: Gossipsub<TSubstream>,
    /// Keep regular connection to peers and disconnect if absent.
    ping: Ping<TSubstream>,
    mdns: Mdns<TSubstream>,
    kademlia: Kademlia<TSubstream, MemoryStore>,
    /// Provides IP addresses and peer information.
    identify: Identify<TSubstream>,
    #[behaviour(ignore)]
    /// The events generated by this behaviour to be consumed in the swarm poll.
    events: Vec<BehaviourEvent>,
    /// Logger for behaviour actions.
    #[behaviour(ignore)]
    log: slog::Logger,
    #[behaviour(ignore)]
    pub peers: HashMap<PeerId, Multiaddr>,
}

impl<TSubstream: AsyncRead + AsyncWrite> Behaviour<TSubstream> {
    pub fn new(
        local_key: &Keypair,
        net_conf: &NetworkConfig,
        log: &slog::Logger,
    ) -> error::Result<Self> {
        let local_peer_id = local_key.public().into_peer_id();
        let behaviour_log = log.new(o!());
        let ping_config = PingConfig::new()
            .with_timeout(Duration::from_secs(30))
            .with_interval(Duration::from_secs(20))
            .with_max_failures(NonZeroU32::new(2).expect("2 != 0"))
            .with_keep_alive(false);

        let identify = Identify::new(
            "map/p2p".into(),
            "0.1".to_string(),
            local_key.public(),
        );


        // Create a Kademlia behaviour.
        let mut cfg = KademliaConfig::default();
        cfg.set_query_timeout(Duration::from_secs(5 * 60));
        let store = MemoryStore::new(local_peer_id.clone());
        let kademlia = Kademlia::with_config(local_peer_id.clone(), store, cfg);
        // behaviour.add_address(&"QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ".parse().unwrap(), "/ip4/104.131.131.82/tcp/4001".parse().unwrap());

        Ok(Behaviour {
            gossipsub: Gossipsub::new(local_peer_id, GossipsubConfigBuilder::new()
                .max_transmit_size(1_048_576)
                .heartbeat_interval(Duration::from_secs(20))
                .build()),
            ping: Ping::new(ping_config),
            mdns: Mdns::new().expect("Failed to create mDNS service"),
            kademlia,
            identify,
            events: Vec::new(),
            log: behaviour_log,
            peers: Default::default(),
        })
    }
}

// Implement the NetworkBehaviourEventProcess trait so that we can derive NetworkBehaviour for Behaviour
impl<TSubstream: AsyncRead + AsyncWrite> NetworkBehaviourEventProcess<GossipsubEvent>
for Behaviour<TSubstream>
{
    fn inject_event(&mut self, event: GossipsubEvent) {
        println!("GossipsubEvent inject_event{:?}", event);
        match event {
            GossipsubEvent::Message(peer_id, _msg_id, gs_msg) => {
                //debug!(self.log, "Received GossipEvent"; "msg" => format!("{:?}", gs_msg));
                self.events.push(BehaviourEvent::PubsubMessage {
                    source: peer_id,
                    message: gs_msg,
                });
            }
            GossipsubEvent::Subscribed { peer_id, topic } => {
                println!(
                    "gossipsub: peer_id {} topic {:?}",
                    peer_id.to_base58(),
                    topic
                );
            }
            GossipsubEvent::Unsubscribed { .. } => {}
        }
    }
}

impl<TSubstream: AsyncRead + AsyncWrite> NetworkBehaviourEventProcess<PingEvent>
for Behaviour<TSubstream>
{
    fn inject_event(&mut self, event: PingEvent) {
        match event {
            PingEvent {
                peer,
                result: Result::Ok(PingSuccess::Ping { rtt }),
            } => {
                println!(
                    "ping: rtt to {} is {} ms",
                    peer.to_base58(),
                    rtt.as_millis()
                );
            }
            PingEvent {
                peer,
                result: Result::Ok(PingSuccess::Pong),
            } => {
                println!("ping: pong from {}", peer.to_base58());
            }
            PingEvent {
                peer,
                result: Result::Err(PingFailure::Timeout),
            } => {
                println!("ping: timeout to {}", peer.to_base58());
            }
            PingEvent {
                peer,
                result: Result::Err(PingFailure::Other { error }),
            } => {
                println!("ping: failure with {}: {}", peer.to_base58(), error);
            }
        }
    }
}

impl<TSubstream: AsyncRead + AsyncWrite> NetworkBehaviourEventProcess<MdnsEvent>
for Behaviour<TSubstream>
{
    fn inject_event(&mut self, event: MdnsEvent) {
        println!("inject_event MdnsEvent  {:?}", event);
        match event {
            MdnsEvent::Discovered(list) => {
                for (peer_id, multiaddr) in list {
                    println!("inject_event Discovered {:?} {:?}", peer_id, multiaddr);
                    self.kademlia.add_address(&peer_id, multiaddr);
                }
            }
            MdnsEvent::Expired(list) => {
                for (peer, _) in list {
                    println!("inject_event Expired {:?}", peer);
                    if !self.mdns.has_node(&peer) {}
                }
            }
        }
    }
}

impl<TSubstream: AsyncRead + AsyncWrite> NetworkBehaviourEventProcess<KademliaEvent>
for Behaviour<TSubstream>
{
    // Called when `kademlia` produces an event.
    fn inject_event(&mut self, message: KademliaEvent) {
        println!("KademliaEvent inject_event( {:?} ", message);
        match message {
            KademliaEvent::GetClosestPeersResult(res) => {
                match res {
                    Ok(ok) => {
                        if !ok.peers.is_empty() {
                            println!("Query finished with closest peers: {:#?}", ok.peers);
                        } else {
                            // The example is considered failed as there
                            // should always be at least 1 reachable peer.
                            println!("Query finished with no closest peers.");
                        }
                    }
                    Err(GetClosestPeersError::Timeout { peers, .. }) => {
                        if !peers.is_empty() {
                            println!("Query timed out with closest peers: {:#?}", peers);
                        } else {
                            // The example is considered failed as there
                            // should always be at least 1 reachable peer.
                            println!("Query timed out with no closest peers.");
                        }
                    }
                }
            }
            _ => {
                println!("KademliaEvent inject_event else ");
            }
        }
    }
}

impl<TSubstream: AsyncRead + AsyncWrite> Behaviour<TSubstream> {
    /// Consumes the events list when polled.
    fn poll<TBehaviourIn>(
        &mut self,
    ) -> Async<NetworkBehaviourAction<TBehaviourIn, BehaviourEvent>> {
        if !self.events.is_empty() {
            return Async::Ready(NetworkBehaviourAction::GenerateEvent(self.events.remove(0)));
        }

        Async::NotReady
    }
}

impl<TSubstream: AsyncRead + AsyncWrite> NetworkBehaviourEventProcess<IdentifyEvent>
for Behaviour<TSubstream>
{
    fn inject_event(&mut self, event: IdentifyEvent) {
        match event {
            IdentifyEvent::Received {
                peer_id,
                mut info,
                observed_addr,
            } => {
                if info.listen_addrs.len() > MAX_IDENTIFY_ADDRESSES {
                    debug!(
                        self.log,
                        "More than 20 addresses have been identified, truncating"
                    );
                    info.listen_addrs.truncate(MAX_IDENTIFY_ADDRESSES);
                }
                debug!(self.log, "Identified Peer"; "peer" => format!("{}", peer_id),
                "protocol_version" => info.protocol_version,
                "agent_version" => info.agent_version,
                "listening_ addresses" => format!("{:?}", info.listen_addrs),
                "observed_address" => format!("{:?}", observed_addr),
                "protocols" => format!("{:?}", info.protocols)
                );
            }
            IdentifyEvent::Sent { .. } => {}
            IdentifyEvent::Error { .. } => {}
        }
    }
}

/// Implements the combined behaviour for the libp2p service.
impl<TSubstream: AsyncRead + AsyncWrite> Behaviour<TSubstream> {
    /* Pubsub behaviour functions */

    /// Subscribes to a gossipsub topic.
    pub fn subscribe(&mut self, topic: Topic) -> bool {
        self.gossipsub.subscribe(topic)
    }

    /// Publishes a message on the pubsub (gossipsub) behaviour.
    pub fn publish(&mut self, topics: Vec<Topic>, message: Vec<u8>) {
        for topic in topics {
            self.gossipsub.publish(&topic, message.clone());
        }
    }

    /// Publishes a message on the pubsub (gossipsub) behaviour.
    pub fn query_kad(&mut self, to_search: PeerId) {
        println!("Searching for the closest peers to {:?}", to_search);
        self.kademlia.get_closest_peers(to_search);
    }
}

/// The types of events than can be obtained from polling the behaviour.
pub enum BehaviourEvent {
    ImportBlock(PeerId, Block),
    PeerDialed(PeerId),
    PeerDisconnected(PeerId),
    PubsubMessage {
        source: PeerId,
        message: GossipsubMessage,
    },
}
